/*
 * Clock.cpp
 *
 *  Created on: 29.01.2015
 *      Author: sr
 */

#include "Clock.h"

TimeSpan onesec(1);
#include "LEDMatrixPanel.h"

Clock::Clock(LEDMatrixPanel& p, RTC_DS1307& rtc)
: panel(p), nextClockRefresh(0), nextRtcSync(0) {
	this->rtc = &rtc;
	glowCount = 2;
	boolean on = true;
}

Clock::~Clock() {
}

byte digits[12][64] = {
		// big 0
		 { 0xAA , 0xFF , 0xFE , 0xAB , 0xAA , 0xFF , 0xFE , 0xAB , 0xAA , 0xFF , 0xFE , 0xAB , 0xAA , 0xFF , 0xFE , 0xAB , 0xA0 , 0x55 , 0x54 , 0x2B , 0xA0 , 0x55 , 0x54 , 0x2B , 0x00 , 0x55 , 0x54 , 0x03 , 0x00 , 0x55 , 0x54 , 0x03 , 0x00 , 0xAA , 0xA8 , 0x03 , 0x00 , 0xAA , 0xA8 , 0x03 , 0x50 , 0xAA , 0xA8 , 0x17 , 0x50 , 0xAA , 0xA8 , 0x17 , 0x55 , 0xFF , 0xFD , 0x57 , 0x55 , 0xFF , 0xFD , 0x57 , 0x55 , 0xFF , 0xFD , 0x57 , 0x55 , 0xFF , 0xFD , 0x57 ,  },
		// big 1
		 { 0xFF , 0xAA , 0xBF , 0xFF , 0xFF , 0xAA , 0xBF , 0xFF , 0xFF , 0xAA , 0xBF , 0xFF , 0xFF , 0xAA , 0xBF , 0xFF , 0xFF , 0x80 , 0x3F , 0xFF , 0xFF , 0x00 , 0x3F , 0xFF , 0xFD , 0x00 , 0x3F , 0xFF , 0xF5 , 0x00 , 0x3F , 0xFF , 0x80 , 0x00 , 0x2A , 0xAF , 0x00 , 0x00 , 0x2A , 0xAF , 0xAA , 0x00 , 0x2A , 0xAF , 0xAA , 0x00 , 0x2A , 0xAF , 0xFF , 0x55 , 0x7F , 0xFF , 0xFF , 0x55 , 0x7F , 0xFF , 0xFF , 0x55 , 0x7F , 0xFF , 0xFF , 0x55 , 0x7F , 0xFF ,  },
		// big 2
		 { 0xFF , 0xAA , 0xAF , 0xFF , 0xFE , 0xAA , 0xBF , 0xFF , 0xFA , 0xAA , 0xFF , 0xFF , 0xEA , 0xAB , 0xFF , 0xFF , 0xE8 , 0x05 , 0x55 , 0xFF , 0xC0 , 0x05 , 0x55 , 0x5F , 0x40 , 0x05 , 0x50 , 0x03 , 0x40 , 0x2F , 0xF0 , 0x03 , 0x40 , 0xAA , 0xA8 , 0x03 , 0x40 , 0xAA , 0xA8 , 0x03 , 0xEA , 0xAA , 0xA8 , 0x03 , 0xEA , 0xAA , 0xA0 , 0x0B , 0xFF , 0xFF , 0xD5 , 0x5F , 0xFF , 0xFF , 0x55 , 0x7F , 0xFF , 0xF5 , 0x55 , 0xFF , 0xFF , 0xD5 , 0x57 , 0xFF ,  },
		// big 3
		 { 0xFF , 0xEA , 0xAA , 0xBF , 0xFF , 0xEA , 0xAA , 0xAF , 0xFF , 0xFF , 0xEA , 0xAF , 0xFF , 0xFF , 0xFA , 0xAB , 0xFD , 0x55 , 0x54 , 0xAB , 0xD5 , 0x55 , 0x54 , 0x2B , 0x00 , 0x55 , 0x54 , 0x0B , 0x00 , 0x55 , 0x50 , 0x0F , 0x00 , 0xBF , 0xE0 , 0x07 , 0x02 , 0xAA , 0xA8 , 0x17 , 0xEA , 0xAA , 0xA8 , 0x57 , 0xFE , 0xAA , 0xA9 , 0x57 , 0xFF , 0xFF , 0xF5 , 0x5F , 0xFF , 0xFF , 0xD5 , 0x5F , 0xFF , 0xD5 , 0x55 , 0x5F , 0xFF , 0xD5 , 0x55 , 0x7F ,  },
		// big 4
		 { 0xAA , 0xAA , 0xAA , 0xAB , 0xAA , 0xAA , 0xAA , 0xAB , 0xAA , 0xAA , 0xAA , 0xAB , 0xFF , 0xFF , 0xFA , 0xAF , 0xFF , 0xFF , 0xF8 , 0x0F , 0xFF , 0xFF , 0xF0 , 0x0F , 0xFF , 0xFF , 0xD0 , 0x0F , 0xFF , 0xFF , 0x50 , 0x0F , 0xFF , 0xFD , 0x50 , 0x0F , 0xFF , 0xF5 , 0x50 , 0x0F , 0xFF , 0xD5 , 0x50 , 0x0F , 0xFF , 0x55 , 0xF0 , 0x0F , 0xFD , 0x57 , 0xF5 , 0x5F , 0xF5 , 0x5F , 0xF5 , 0x5F , 0xD5 , 0x7F , 0xF5 , 0x5F , 0x55 , 0xFF , 0xF5 , 0x5F ,  },
		// big 5
		 { 0xAA , 0xFF , 0xEA , 0xAF , 0xFF , 0xFF , 0xFA , 0xAB , 0xFF , 0xFF , 0xFE , 0xAB , 0xFF , 0xFF , 0xFE , 0xAB , 0x55 , 0x55 , 0x54 , 0x03 , 0x55 , 0x55 , 0x54 , 0x03 , 0x01 , 0x55 , 0x54 , 0x03 , 0x00 , 0x55 , 0x50 , 0x07 , 0x00 , 0xBF , 0xEA , 0xAF , 0x00 , 0xAA , 0xAA , 0xBF , 0x40 , 0xAA , 0xAA , 0xFF , 0x50 , 0xAA , 0xAB , 0xFF , 0x55 , 0x55 , 0x57 , 0xFF , 0x55 , 0x55 , 0x55 , 0xFF , 0x55 , 0x55 , 0x55 , 0x7F , 0x55 , 0x55 , 0x55 , 0x5F ,  },
		// big 6
		 { 0xAA , 0xAA , 0xAA , 0xAF , 0xAA , 0xAA , 0xAA , 0xAB , 0xAA , 0xBF , 0xFA , 0xAB , 0xAA , 0xFF , 0xFE , 0xAB , 0xAA , 0x55 , 0x56 , 0xAB , 0xA0 , 0x55 , 0x54 , 0x2B , 0xA0 , 0x55 , 0x54 , 0x0B , 0xC0 , 0x15 , 0x50 , 0x0B , 0xC0 , 0x2A , 0xA0 , 0x0F , 0x40 , 0xAA , 0xA8 , 0x1F , 0x50 , 0xAA , 0xAA , 0xFF , 0x55 , 0xAA , 0xAF , 0xFF , 0x55 , 0xFF , 0xFF , 0xFF , 0x55 , 0xFF , 0xFF , 0xFF , 0x55 , 0xD5 , 0x55 , 0xFF , 0x55 , 0x55 , 0x55 , 0x5F ,  },
		// big 7
		 { 0xFE , 0xAA , 0xFF , 0xFF , 0xFE , 0xAA , 0xFF , 0xFF , 0xFE , 0xAA , 0xFF , 0xFF , 0xFE , 0xAA , 0xFF , 0xFF , 0x54 , 0x00 , 0x55 , 0x57 , 0x54 , 0x00 , 0x55 , 0x57 , 0x54 , 0x00 , 0x55 , 0x57 , 0x54 , 0xAA , 0xF5 , 0x57 , 0x54 , 0xAA , 0xF5 , 0x57 , 0x56 , 0xAA , 0xF5 , 0x57 , 0xFE , 0xAA , 0xD5 , 0x5F , 0xFE , 0xAA , 0x55 , 0x7F , 0xFF , 0xFD , 0x55 , 0xFF , 0xFF , 0xF5 , 0x57 , 0xFF , 0xFF , 0xD5 , 0x5F , 0xFF , 0xFF , 0x55 , 0x7F , 0xFF ,  },
		// big 8
		 { 0xEA , 0xAA , 0xAA , 0xAF , 0xAA , 0xAA , 0xAA , 0xAB , 0xAA , 0xFF , 0xFE , 0xAB , 0xAA , 0xFF , 0xFE , 0xAB , 0xA0 , 0x55 , 0x54 , 0x2B , 0xA0 , 0x55 , 0x54 , 0x2B , 0x00 , 0x55 , 0x54 , 0x03 , 0x00 , 0x55 , 0x54 , 0x03 , 0x00 , 0xAA , 0xA8 , 0x03 , 0x00 , 0xAA , 0xA8 , 0x03 , 0x50 , 0xAA , 0xA8 , 0x17 , 0x50 , 0xAA , 0xA8 , 0x17 , 0x55 , 0xFF , 0xFD , 0x57 , 0x55 , 0xFF , 0xFD , 0x57 , 0x55 , 0x55 , 0x55 , 0x57 , 0xD5 , 0x55 , 0x55 , 0x5F ,  },
		// big 9
		 { 0xFE , 0xAA , 0xAA , 0xAB , 0xFF , 0xFF , 0xFE , 0xAB , 0xFF , 0xFF , 0xFE , 0xAB , 0xFF , 0xFF , 0xFE , 0xAB , 0xFD , 0x55 , 0x54 , 0xAB , 0x80 , 0x55 , 0x54 , 0x2B , 0x00 , 0x55 , 0x54 , 0x0B , 0x00 , 0x15 , 0x50 , 0x0B , 0x00 , 0x2A , 0xA0 , 0x03 , 0x00 , 0xAA , 0xA8 , 0x07 , 0x40 , 0xAA , 0xA8 , 0x17 , 0x50 , 0xAA , 0xA8 , 0x57 , 0x55 , 0xFF , 0xFD , 0x57 , 0x55 , 0x7F , 0xF5 , 0x57 , 0xD5 , 0x55 , 0x55 , 0x57 , 0xD5 , 0x55 , 0x55 , 0x57 ,  },
		// big :
		 { 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xF5 , 0x7F , 0xFF , 0xFF , 0xF5 , 0x7F , 0xFF , 0xFF , 0xF5 , 0x7F , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xF5 , 0x7F , 0xFF , 0xFF , 0xF5 , 0x7F , 0xFF , 0xFF , 0xF5 , 0x7F , 0xFF ,  },

		 { 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF   }

};

void Clock::update(long now) {
	if( nextRtcSync < now ) {
		nextRtcSync = now + 30*60*1000;  // 30 min
		n = rtc->now();
	}
	if( nextClockRefresh < now ) {
		nextClockRefresh = now + 500;
		boolean tick = (now%1000) > 500;
		writeTime(now);
		if( tick ) {
			n = n + onesec;
		}
		if( glowCount >0 ) {
			glowCount--;
			nextClockRefresh = now + 200;
		} else {
			panel.setTimePlaneBright(true);
		}
	}
}

void Clock::writeDigit(int digit, int xoffset) {
	byte* src = digits[digit];
	for( int row = 0; row < 16; row++ ) {
		uint8_t* ptr = panel.getBuffers()[2] + row * panel.getWidth()/4 +xoffset;
//		uint8_t* ptr1;
//		if( glowCount==0 ) {
//			ptr1 = panel.getBuffers()[1] + row * panel.getWidth()/4 +xoffset;
//		}
		for( int p=0;p<4;p++) {
//			if( glowCount==0 ) *ptr1++ = *src;
	    	*ptr++ = *src++;
	    }
	}
}

void Clock::writeTime(long now) {
	if(active) {
		boolean tick = (now%1000) > 500;
		int x = 5;
		if( n.hour()>10 ) {
			writeDigit(n.hour()/10,x);
		}
		x+=4;
		writeDigit(n.hour()%10,x);
		x+=4;
		writeDigit(tick?10:11,x);
		x+=4;
		if( n.minute()>=10 ) {
			writeDigit(n.minute()/10,x);
		} else {
			writeDigit(0,x);
		}
		x+=4;
		writeDigit(n.minute()%10,x);
	}
}

void Clock::clear() {
	byte* p = panel.getBuffers()[2];
	byte* pend = p + panel.getSizeOfBufferInByte();
	while(p<pend) {
		*p++ = 0xFF;
	}
}

void Clock::off() {
	active = false;
	panel.setTimePlaneBright(false);
	clear();
}

void Clock::on() {
	if( !active ) {
		active = true;
		glowCount = 2;
		update(millis());
	}
}
