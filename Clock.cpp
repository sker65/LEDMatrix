/*
 * Clock.cpp
 *
 *  Created on: 29.01.2015
 *      Author: sr
 */

#include "Clock.h"

TimeSpan onesec(1);
#include "LEDMatrixPanel.h"

Clock::Clock(LEDMatrixPanel& p, RTC_DS1307& rtc)
: panel(p), nextClockRefresh(0), nextRtcSync(0) {
	this->rtc = &rtc;
}

Clock::~Clock() {
}

byte digits[12][64] = {
// big 0
  { 0xAA , 0xD5 , 0x7A , 0xAF , 0xA8 , 0x55 , 0x52 , 0xAF , 0xA0 , 0x55 , 0x50 , 0xAF , 0x80 , 0x55 , 0x50 , 0x2F , 0x80 , 0x7F , 0xD0 , 0x2F , 0xC0 , 0xFF , 0xF0 , 0x3F , 0x40 , 0xBF , 0xE0 , 0x1F , 0x40 , 0xAA , 0xA0 , 0x1F , 0x50 , 0xAA , 0xA0 , 0x5F , 0x54 , 0xAA , 0xA1 , 0x5F , 0x55 , 0xEA , 0xB5 , 0x5F , 0x55 , 0xFF , 0xF5 , 0x5F , 0x55 , 0xFF , 0xF5 , 0x5F , 0x55 , 0xFF , 0xF5 , 0x5F , 0x55 , 0xFF , 0xF5 , 0x5F , 0x55 , 0xFF , 0xF5 , 0x5F ,  },
// big 1
  { 0xFF , 0xD0 , 0x0F , 0xFF , 0xFF , 0xD0 , 0x0F , 0xFF , 0xFF , 0xD0 , 0x0F , 0xFF , 0xFF , 0xD0 , 0x0F , 0xFF , 0xFF , 0xD0 , 0x0F , 0xFF , 0xFF , 0xF0 , 0x0F , 0xFF , 0xFF , 0xF0 , 0x0F , 0xFF , 0xFF , 0xF0 , 0x0F , 0xFF , 0xFF , 0xF0 , 0x0F , 0xFF , 0xFF , 0xF0 , 0x0F , 0xFF , 0xFF , 0xF0 , 0x0F , 0xFF , 0xFF , 0xF5 , 0x5F , 0xFF , 0xFF , 0xF5 , 0x5F , 0xFF , 0xFF , 0xF5 , 0x5F , 0xFF , 0xFF , 0xF5 , 0x5F , 0xFF , 0xFF , 0xF5 , 0x5F , 0xFF ,  },
// big 2
  { 0xFE , 0x01 , 0x7F , 0xFF , 0xF0 , 0x05 , 0x57 , 0xFF , 0xC0 , 0x15 , 0x55 , 0xFF , 0x40 , 0x15 , 0x55 , 0x7F , 0x00 , 0xFF , 0xD5 , 0x7F , 0x02 , 0xFF , 0xF5 , 0x5F , 0xAA , 0xFF , 0xF5 , 0x5F , 0xAA , 0xAA , 0xA0 , 0x0F , 0xAA , 0xAA , 0xA0 , 0x0F , 0xAA , 0xAA , 0xA0 , 0x0F , 0xAA , 0xAA , 0x80 , 0x2F , 0xFF , 0xFF , 0x55 , 0xFF , 0xFF , 0xFD , 0x57 , 0xFF , 0xFF , 0xF5 , 0x5F , 0xFF , 0xFF , 0xD5 , 0x7F , 0xFF , 0xFF , 0x55 , 0xFF , 0xFF ,  },
// big 3
  { 0xFF , 0x55 , 0x7A , 0xAF , 0xF5 , 0x55 , 0x52 , 0xAF , 0xD5 , 0x55 , 0x50 , 0xAF , 0x01 , 0x55 , 0x50 , 0x2F , 0x01 , 0xFF , 0xD0 , 0x2F , 0x03 , 0xFF , 0xF0 , 0x3F , 0x02 , 0xFF , 0xE0 , 0x1F , 0x02 , 0xAA , 0xA0 , 0x1F , 0xEA , 0xAA , 0xA0 , 0x5F , 0xFA , 0xAA , 0xA1 , 0x5F , 0xFF , 0xAA , 0xB5 , 0x5F , 0xFF , 0xFF , 0xD5 , 0x7F , 0xFF , 0xF5 , 0x55 , 0x7F , 0xFF , 0xF5 , 0x55 , 0x7F , 0xFF , 0xF5 , 0x55 , 0x7F , 0xFF , 0xFF , 0xD5 , 0x7F ,  },
// big 4
  { 0xEA , 0xBF , 0xC0 , 0x3F , 0xAA , 0xFF , 0x40 , 0x3F , 0xAA , 0xFF , 0x40 , 0x3F , 0xAA , 0xA8 , 0x00 , 0x2F , 0xAA , 0xA8 , 0x00 , 0x2F , 0xAA , 0xA0 , 0x00 , 0x2F , 0xFF , 0xF5 , 0x40 , 0x3F , 0xFF , 0xD5 , 0x40 , 0x3F , 0xFF , 0xD5 , 0x40 , 0x3F , 0xFF , 0x55 , 0xC0 , 0x3F , 0xFF , 0x55 , 0xC0 , 0x3F , 0xFD , 0x57 , 0xD5 , 0x7F , 0xFD , 0x57 , 0xD5 , 0x7F , 0xF5 , 0x5F , 0xD5 , 0x7F , 0xF5 , 0x5F , 0xD5 , 0x7F , 0xD5 , 0x7F , 0xD5 , 0x7F ,  },
// big 5
  { 0x55 , 0x55 , 0x50 , 0x0F , 0x55 , 0x55 , 0x50 , 0x0F , 0x55 , 0x55 , 0x50 , 0x0F , 0x00 , 0x55 , 0x50 , 0x0F , 0x00 , 0xFF , 0xFA , 0xAF , 0x00 , 0xFF , 0xFA , 0xAF , 0x40 , 0xBF , 0xEA , 0xBF , 0x40 , 0xAA , 0xAA , 0xBF , 0x50 , 0xAA , 0xAA , 0xFF , 0x54 , 0xAA , 0xAB , 0xFF , 0x55 , 0xEA , 0xBF , 0xFF , 0x55 , 0x55 , 0x5F , 0xFF , 0x55 , 0x55 , 0x55 , 0xFF , 0x55 , 0x55 , 0x55 , 0x7F , 0xFF , 0xFF , 0xD5 , 0x7F , 0xFF , 0xFF , 0xF5 , 0x5F ,  },
// big 6
  { 0xAA , 0xD5 , 0x7A , 0xAF , 0xA8 , 0x55 , 0x52 , 0xAF , 0xA0 , 0x55 , 0x50 , 0xAF , 0x80 , 0x55 , 0x50 , 0x2F , 0x80 , 0x7F , 0xD0 , 0x2F , 0x80 , 0xFF , 0xF0 , 0x2F , 0x40 , 0xBF , 0xEA , 0xBF , 0x40 , 0xAA , 0xAA , 0xBF , 0x50 , 0xAA , 0xAA , 0xFF , 0x54 , 0xAA , 0xAB , 0xFF , 0x55 , 0xEA , 0xBF , 0xFF , 0x55 , 0xFF , 0xFF , 0xFF , 0x55 , 0x55 , 0x5F , 0xFF , 0x55 , 0x55 , 0x55 , 0xFF , 0x55 , 0x55 , 0x55 , 0x7F , 0x55 , 0x7F , 0xD5 , 0x7F ,  },
// big 7
  { 0x55 , 0x40 , 0x15 , 0x5F , 0x55 , 0x00 , 0x55 , 0x5F , 0x55 , 0x00 , 0x55 , 0x5F , 0x54 , 0x01 , 0x55 , 0x5F , 0xFE , 0xAB , 0xF5 , 0x5F , 0xFA , 0xAF , 0xF5 , 0x5F , 0xFA , 0xAF , 0xF5 , 0x5F , 0xEA , 0xBF , 0xD5 , 0x7F , 0xEA , 0xBF , 0xD5 , 0x7F , 0xAA , 0xFF , 0x55 , 0xFF , 0xAA , 0xFF , 0x55 , 0xFF , 0xFF , 0xFD , 0x57 , 0xFF , 0xFF , 0xFD , 0x57 , 0xFF , 0xFF , 0xF5 , 0x5F , 0xFF , 0xFF , 0xF5 , 0x5F , 0xFF , 0xFF , 0xD5 , 0x7F , 0xFF ,  },
// big 8
  { 0xAA , 0xD5 , 0x7A , 0xAF , 0xA8 , 0x55 , 0x52 , 0xAF , 0xA0 , 0x55 , 0x50 , 0xAF , 0x80 , 0x55 , 0x50 , 0x2F , 0x80 , 0x7F , 0xD0 , 0x2F , 0xC0 , 0xFF , 0xF0 , 0x3F , 0x40 , 0xBF , 0xE0 , 0x1F , 0x40 , 0xAA , 0xA0 , 0x1F , 0x50 , 0xAA , 0xA0 , 0x5F , 0x54 , 0xAA , 0xA1 , 0x5F , 0x55 , 0xEA , 0xB5 , 0x5F , 0xD5 , 0x7F , 0xD5 , 0x7F , 0xD5 , 0x55 , 0x55 , 0x7F , 0xF5 , 0x55 , 0x55 , 0xFF , 0xD5 , 0x55 , 0x55 , 0x7F , 0xD5 , 0x7F , 0xD5 , 0x7F ,  },
// big 9
  { 0xFF , 0xD5 , 0x7A , 0xAF , 0xFD , 0x55 , 0x52 , 0xAF , 0xF5 , 0x55 , 0x50 , 0xAF , 0xD5 , 0x55 , 0x50 , 0x2F , 0xD5 , 0x7F , 0xD0 , 0x2F , 0xC0 , 0xFF , 0xF0 , 0x2F , 0x40 , 0xBF , 0xE0 , 0x1F , 0x40 , 0xAA , 0xA0 , 0x1F , 0x50 , 0xAA , 0xA0 , 0x5F , 0x54 , 0xAA , 0xA1 , 0x5F , 0x55 , 0xEA , 0xB5 , 0x5F , 0xD5 , 0x7F , 0xD5 , 0x5F , 0xD5 , 0x55 , 0x55 , 0x5F , 0xF5 , 0x55 , 0x55 , 0x5F , 0xFF , 0x55 , 0x55 , 0x5F , 0xFF , 0xFF , 0xF5 , 0x5F ,  },
// big :
  { 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xEA , 0xFF , 0xFF , 0xFF , 0xEA , 0xFF , 0xFF , 0xFF , 0xEA , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xD5 , 0xFF , 0xFF , 0xFF , 0xD5 , 0xFF , 0xFF , 0xFF , 0xD5 , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF ,  },

  { 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF ,  },

};

void Clock::update(long now) {
	if( nextRtcSync < now ) {
		nextRtcSync = now + 30*60*1000;  // 30 min
		n = rtc->now();
	}
	if( nextClockRefresh < now ) {
		nextClockRefresh = now + 500;
		boolean tick = (now%1000) > 500;
		writeTime(tick);
		if( tick ) {
			n = n + onesec;
		}
	}
}

void Clock::writeDigit(int digit, int xoffset) {
	byte* src = digits[digit];
	for( int row = 0; row < 16; row++ ) {
		uint8_t* ptr = panel.getBuffers()[0] + row * panel.getWidth()/4 +xoffset;
		for( int p=0;p<4;p++) {
	    	*ptr++ = *src++;
	    }
	}
}

void Clock::writeTime(boolean tick) {
	int x = 5;
	if( n.hour()>10 ) {
		writeDigit(n.hour()/10,x);
	}
	x+=4;
	writeDigit(n.hour()%10,x);
	x+=4;
	writeDigit(tick?10:11,x);
	x+=4;
	if( n.minute()>=10 ) {
		writeDigit(n.minute()/10,x);
	} else {
		writeDigit(0,x);
	}
	x+=4;
	writeDigit(n.minute()%10,x);
}


