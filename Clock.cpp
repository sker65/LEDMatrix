/*
 * Clock.cpp
 *
 *  Created on: 29.01.2015
 *      Author: sr
 */

#include "Clock.h"

TimeSpan onesec(1);
#include "LEDMatrixPanel.h"

#define maxBrightness 2

const byte clockMask[12][64] = {
// big 0
		{ 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
				0xAA, 0xA0, 0x00, 0x00, 0x2A, 0x80, 0x00, 0x00, 0x0A, 0x00,
				0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x05, 0x50, 0x00, 0x00,
				0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
				0x55, 0x55, 0x55, },
		// big 1
		{ 0xFE, 0xAA, 0xAF, 0xFF, 0xFE, 0xAA, 0xAF, 0xFF, 0xFE, 0xAA, 0xAF,
				0xFF, 0xFE, 0x80, 0x0F, 0xFF, 0xFE, 0x00, 0x0F, 0xFF, 0xFC,
				0x00, 0x0F, 0xFF, 0xF4, 0x00, 0x0F, 0xFF, 0x80, 0x00, 0x0A,
				0xAB, 0x00, 0x00, 0x0A, 0xAB, 0x00, 0x00, 0x0A, 0xAB, 0x00,
				0x00, 0x0A, 0xAB, 0xA8, 0x00, 0x0A, 0xAB, 0xA8, 0x00, 0x0A,
				0xAB, 0xFD, 0x55, 0x5F, 0xFF, 0xFD, 0x55, 0x5F, 0xFF, 0xFD,
				0x55, 0x5F, 0xFF, },
		// big 2
		{ 0xFE, 0xAA, 0xAB, 0xFF, 0xFA, 0xAA, 0xAF, 0xFF, 0xEA, 0xAA, 0xBF,
				0xFF, 0xA0, 0x00, 0x55, 0xFF, 0x80, 0x01, 0x55, 0x5F, 0x00,
				0x01, 0x40, 0x02, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x0A, 0xA0, 0x00, 0x00, 0x2A, 0xA0, 0x00, 0x00,
				0xAA, 0xA0, 0x00, 0xAA, 0xAA, 0x80, 0x02, 0xAA, 0xAA, 0x00,
				0x02, 0xFF, 0xF5, 0x55, 0x5F, 0xFF, 0xD5, 0x55, 0x7F, 0xFF,
				0x55, 0x55, 0xFF, },
		// big 3
		{ 0xFF, 0xAA, 0xAA, 0xAF, 0xFF, 0xAA, 0xAA, 0xAB, 0xFF, 0xAA, 0xAA,
				0xAB, 0xF5, 0x55, 0x40, 0x2A, 0xD5, 0x55, 0x50, 0x2A, 0x00,
				0x15, 0x50, 0x0A, 0x00, 0x15, 0x50, 0x0A, 0x00, 0x15, 0x40,
				0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0xAA, 0xA0, 0x05, 0x02,
				0xAA, 0xA0, 0x15, 0xEA, 0xAA, 0xA0, 0x55, 0xFE, 0xAA, 0x81,
				0x57, 0xFF, 0x55, 0x55, 0x57, 0xFF, 0x55, 0x55, 0x57, 0xFF,
				0x55, 0x55, 0x5F, },
		// big 4
		{ 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
				0xAA, 0xAA, 0xAA, 0xA8, 0x02, 0xFF, 0xFF, 0xE0, 0x03, 0xFF,
				0xFF, 0xC0, 0x03, 0xFF, 0xFF, 0x40, 0x03, 0xFF, 0xFD, 0x40,
				0x03, 0xFF, 0xF5, 0x40, 0x03, 0xFF, 0xD5, 0x40, 0x03, 0xFF,
				0x55, 0x40, 0x03, 0xFD, 0x55, 0x40, 0x03, 0xF5, 0x55, 0x40,
				0x03, 0xD5, 0x55, 0x55, 0x57, 0x55, 0x55, 0x55, 0x57, 0x55,
				0x55, 0x55, 0x55, },
		// big 5
		{ 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xFF, 0xEA, 0xAA, 0xFF, 0xFF, 0xFA,
				0xAA, 0x55, 0x55, 0x50, 0x00, 0x55, 0x55, 0x50, 0x00, 0x01,
				0x55, 0x50, 0x00, 0x00, 0x55, 0x50, 0x00, 0x00, 0x15, 0x40,
				0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2A, 0xAA, 0xAF, 0x00,
				0x2A, 0xAA, 0xBF, 0x40, 0x00, 0x00, 0xFF, 0x50, 0x00, 0x01,
				0x7F, 0x55, 0x55, 0x55, 0x7F, 0x55, 0x55, 0x55, 0x5F, 0x55,
				0x55, 0x55, 0x57, },
		// big 6
		{ 0xAA, 0xAA, 0xAA, 0xAB, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
				0xAA, 0xA8, 0x00, 0x00, 0xAA, 0xA0, 0x00, 0x00, 0x2A, 0x80,
				0x00, 0x00, 0x0A, 0x80, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
				0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x2A, 0xA0, 0x07, 0x40,
				0x2A, 0xA0, 0x17, 0x50, 0x2A, 0xAA, 0xFF, 0x55, 0x2A, 0xAF,
				0xFF, 0x55, 0x55, 0x55, 0xFF, 0x55, 0x55, 0x55, 0x5F, 0x55,
				0x55, 0x55, 0x57, },
		// big 7
		{ 0xFA, 0xAA, 0xBF, 0xFF, 0xFA, 0xAA, 0xBF, 0xFF, 0xFA, 0xAA, 0xBF,
				0xFF, 0x50, 0x00, 0x15, 0x55, 0x50, 0x00, 0x15, 0x55, 0x50,
				0x00, 0x15, 0x55, 0x50, 0x00, 0x15, 0x55, 0x50, 0x00, 0x15,
				0x55, 0x50, 0x2A, 0x95, 0x55, 0x50, 0xAA, 0x95, 0x55, 0x50,
				0xAA, 0x15, 0x55, 0xFA, 0xA8, 0x15, 0x5F, 0xFA, 0xA0, 0x15,
				0x7F, 0xFF, 0xD5, 0x55, 0xFF, 0xFF, 0x55, 0x57, 0xFF, 0xFD,
				0x55, 0x5F, 0xFF, },
		// big 8
		{ 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
				0xAA, 0xA0, 0x00, 0x00, 0x0A, 0x80, 0x00, 0x00, 0x0A, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x05, 0x40, 0x00, 0x00,
				0x05, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
				0x55, 0x55, 0x55, },
		// big 9
		{ 0xEA, 0xAA, 0xAA, 0xAA, 0xFE, 0xAA, 0xAA, 0xAA, 0xFF, 0xFF, 0xFA,
				0xAA, 0xFD, 0x55, 0x50, 0xAA, 0x80, 0x55, 0x50, 0x2A, 0x00,
				0x15, 0x50, 0x0A, 0x00, 0x15, 0x40, 0x02, 0x00, 0x00, 0x00,
				0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
				0x00, 0x00, 0x05, 0x40, 0x00, 0x00, 0x15, 0x50, 0x00, 0x00,
				0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
				0x55, 0x55, 0x55, },
		// big :
		{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEA, 0xAF, 0xFF, 0xFF, 0xEA, 0xAF,
				0xFF, 0xFF, 0xEA, 0xAF, 0xFF, 0xFF, 0xEA, 0xAF, 0xFF, 0xFF,
				0xEA, 0xAF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xD5, 0x5F, 0xFF, 0xFF, 0xD5, 0x5F, 0xFF, 0xFF, 0xD5, 0x5F,
				0xFF, 0xFF, 0xD5, 0x5F, 0xFF, 0xFF, 0xD5, 0x5F, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, },

		{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF }

};

const byte clockDigits[12][64] = {
// big 0
		{ 0xAA, 0xFF, 0xFE, 0xAB, 0xAA, 0xFF, 0xFE, 0xAB, 0xAA, 0xFF, 0xFE,
				0xAB, 0xAA, 0xFF, 0xFE, 0xAB, 0xA0, 0x55, 0x54, 0x2B, 0xA0,
				0x55, 0x54, 0x2B, 0x00, 0x55, 0x54, 0x03, 0x00, 0x55, 0x54,
				0x03, 0x00, 0xAA, 0xA8, 0x03, 0x00, 0xAA, 0xA8, 0x03, 0x50,
				0xAA, 0xA8, 0x17, 0x50, 0xAA, 0xA8, 0x17, 0x55, 0xFF, 0xFD,
				0x57, 0x55, 0xFF, 0xFD, 0x57, 0x55, 0xFF, 0xFD, 0x57, 0x55,
				0xFF, 0xFD, 0x57, },
		// big 1
		{ 0xFF, 0xAA, 0xBF, 0xFF, 0xFF, 0xAA, 0xBF, 0xFF, 0xFF, 0xAA, 0xBF,
				0xFF, 0xFF, 0xAA, 0xBF, 0xFF, 0xFF, 0x80, 0x3F, 0xFF, 0xFF,
				0x00, 0x3F, 0xFF, 0xFD, 0x00, 0x3F, 0xFF, 0xF5, 0x00, 0x3F,
				0xFF, 0x80, 0x00, 0x2A, 0xAF, 0x00, 0x00, 0x2A, 0xAF, 0xAA,
				0x00, 0x2A, 0xAF, 0xAA, 0x00, 0x2A, 0xAF, 0xFF, 0x55, 0x7F,
				0xFF, 0xFF, 0x55, 0x7F, 0xFF, 0xFF, 0x55, 0x7F, 0xFF, 0xFF,
				0x55, 0x7F, 0xFF, },
		// big 2
		{ 0xFF, 0xAA, 0xAF, 0xFF, 0xFE, 0xAA, 0xBF, 0xFF, 0xFA, 0xAA, 0xFF,
				0xFF, 0xEA, 0xAB, 0xFF, 0xFF, 0xE8, 0x05, 0x55, 0xFF, 0xC0,
				0x05, 0x55, 0x5F, 0x40, 0x05, 0x50, 0x03, 0x40, 0x2F, 0xF0,
				0x03, 0x40, 0xAA, 0xA8, 0x03, 0x40, 0xAA, 0xA8, 0x03, 0xEA,
				0xAA, 0xA8, 0x03, 0xEA, 0xAA, 0xA0, 0x0B, 0xFF, 0xFF, 0xD5,
				0x5F, 0xFF, 0xFF, 0x55, 0x7F, 0xFF, 0xF5, 0x55, 0xFF, 0xFF,
				0xD5, 0x57, 0xFF, },
		// big 3
		{ 0xFF, 0xEA, 0xAA, 0xBF, 0xFF, 0xEA, 0xAA, 0xAF, 0xFF, 0xFF, 0xEA,
				0xAF, 0xFF, 0xFF, 0xFA, 0xAB, 0xFD, 0x55, 0x54, 0xAB, 0xD5,
				0x55, 0x54, 0x2B, 0x00, 0x55, 0x54, 0x0B, 0x00, 0x55, 0x50,
				0x0F, 0x00, 0xBF, 0xE0, 0x07, 0x02, 0xAA, 0xA8, 0x17, 0xEA,
				0xAA, 0xA8, 0x57, 0xFE, 0xAA, 0xA9, 0x57, 0xFF, 0xFF, 0xF5,
				0x5F, 0xFF, 0xFF, 0xD5, 0x5F, 0xFF, 0xD5, 0x55, 0x5F, 0xFF,
				0xD5, 0x55, 0x7F, },
		// big 4
		{ 0xAA, 0xAA, 0xAA, 0xAB, 0xAA, 0xAA, 0xAA, 0xAB, 0xAA, 0xAA, 0xAA,
				0xAB, 0xFF, 0xFF, 0xFA, 0xAF, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF,
				0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xD0, 0x0F, 0xFF, 0xFF, 0x50,
				0x0F, 0xFF, 0xFD, 0x50, 0x0F, 0xFF, 0xF5, 0x50, 0x0F, 0xFF,
				0xD5, 0x50, 0x0F, 0xFF, 0x55, 0xF0, 0x0F, 0xFD, 0x57, 0xF5,
				0x5F, 0xF5, 0x5F, 0xF5, 0x5F, 0xD5, 0x7F, 0xF5, 0x5F, 0x55,
				0xFF, 0xF5, 0x5F, },
		// big 5
		{ 0xAA, 0xFF, 0xEA, 0xAF, 0xFF, 0xFF, 0xFA, 0xAB, 0xFF, 0xFF, 0xFE,
				0xAB, 0xFF, 0xFF, 0xFE, 0xAB, 0x55, 0x55, 0x54, 0x03, 0x55,
				0x55, 0x54, 0x03, 0x01, 0x55, 0x54, 0x03, 0x00, 0x55, 0x50,
				0x07, 0x00, 0xBF, 0xEA, 0xAF, 0x00, 0xAA, 0xAA, 0xBF, 0x40,
				0xAA, 0xAA, 0xFF, 0x50, 0xAA, 0xAB, 0xFF, 0x55, 0x55, 0x57,
				0xFF, 0x55, 0x55, 0x55, 0xFF, 0x55, 0x55, 0x55, 0x7F, 0x55,
				0x55, 0x55, 0x5F, },
		// big 6
		{ 0xAA, 0xAA, 0xAA, 0xAF, 0xAA, 0xAA, 0xAA, 0xAB, 0xAA, 0xBF, 0xFA,
				0xAB, 0xAA, 0xFF, 0xFE, 0xAB, 0xAA, 0x55, 0x56, 0xAB, 0xA0,
				0x55, 0x54, 0x2B, 0xA0, 0x55, 0x54, 0x0B, 0xC0, 0x15, 0x50,
				0x0B, 0xC0, 0x2A, 0xA0, 0x0F, 0x40, 0xAA, 0xA8, 0x1F, 0x50,
				0xAA, 0xAA, 0xFF, 0x55, 0xAA, 0xAF, 0xFF, 0x55, 0xFF, 0xFF,
				0xFF, 0x55, 0xFF, 0xFF, 0xFF, 0x55, 0xD5, 0x55, 0xFF, 0x55,
				0x55, 0x55, 0x5F, },
		// big 7
		{ 0xFE, 0xAA, 0xFF, 0xFF, 0xFE, 0xAA, 0xFF, 0xFF, 0xFE, 0xAA, 0xFF,
				0xFF, 0xFE, 0xAA, 0xFF, 0xFF, 0x54, 0x00, 0x55, 0x57, 0x54,
				0x00, 0x55, 0x57, 0x54, 0x00, 0x55, 0x57, 0x54, 0xAA, 0xF5,
				0x57, 0x54, 0xAA, 0xF5, 0x57, 0x56, 0xAA, 0xF5, 0x57, 0xFE,
				0xAA, 0xD5, 0x5F, 0xFE, 0xAA, 0x55, 0x7F, 0xFF, 0xFD, 0x55,
				0xFF, 0xFF, 0xF5, 0x57, 0xFF, 0xFF, 0xD5, 0x5F, 0xFF, 0xFF,
				0x55, 0x7F, 0xFF, },
		// big 8
		{ 0xEA, 0xAA, 0xAA, 0xAF, 0xAA, 0xAA, 0xAA, 0xAB, 0xAA, 0xFF, 0xFE,
				0xAB, 0xAA, 0xFF, 0xFE, 0xAB, 0xA0, 0x55, 0x54, 0x2B, 0xA0,
				0x55, 0x54, 0x2B, 0x00, 0x55, 0x54, 0x03, 0x00, 0x55, 0x54,
				0x03, 0x00, 0xAA, 0xA8, 0x03, 0x00, 0xAA, 0xA8, 0x03, 0x50,
				0xAA, 0xA8, 0x17, 0x50, 0xAA, 0xA8, 0x17, 0x55, 0xFF, 0xFD,
				0x57, 0x55, 0xFF, 0xFD, 0x57, 0x55, 0x55, 0x55, 0x57, 0xD5,
				0x55, 0x55, 0x5F, },
		// big 9
		{ 0xFE, 0xAA, 0xAA, 0xAB, 0xFF, 0xFF, 0xFE, 0xAB, 0xFF, 0xFF, 0xFE,
				0xAB, 0xFF, 0xFF, 0xFE, 0xAB, 0xFD, 0x55, 0x54, 0xAB, 0x80,
				0x55, 0x54, 0x2B, 0x00, 0x55, 0x54, 0x0B, 0x00, 0x15, 0x50,
				0x0B, 0x00, 0x2A, 0xA0, 0x03, 0x00, 0xAA, 0xA8, 0x07, 0x40,
				0xAA, 0xA8, 0x17, 0x50, 0xAA, 0xA8, 0x57, 0x55, 0xFF, 0xFD,
				0x57, 0x55, 0x7F, 0xF5, 0x57, 0xD5, 0x55, 0x55, 0x57, 0xD5,
				0x55, 0x55, 0x57, },
		// big :
		{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0xBF,
				0xFF, 0xFF, 0xFA, 0xBF, 0xFF, 0xFF, 0xFA, 0xBF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xF5, 0x7F, 0xFF, 0xFF, 0xF5, 0x7F,
				0xFF, 0xFF, 0xF5, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, },

		{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF }

};


Clock::Clock(LEDMatrixPanel& p, RTC_DS1307& rtc)
: panel(p), nextClockRefresh(0), nextRtcSync(0) {
	this->rtc = &rtc;
	brightness = 0;
	active=false;
}

Clock::~Clock() {
}

void Clock::adjust(DateTime& dt) {
	rtc->adjust(dt);
}

/**
 * updates the clock cyclic
 * @param now actual time in millis
 */
void Clock::update(long now) {
	if( nextRtcSync < now ) {
		nextRtcSync = now + 30L*60L*1000L;  // 30 min
		lastRtcSync = now;
		n = rtc->now();
	}
	if( nextClockRefresh < now ) {
		nextClockRefresh = now + 500;
		boolean tick = (now%1000) > 500;
		//debug panel.setPixel(1,0,true);
		writeTime(now);
		if( tick ) {
			n = n + onesec;
		}
		// by forcing updates max bright is reached faster
		if( brightness < maxBrightness ) {
			brightness++;
			nextClockRefresh = now + 200;
			panel.setTimeBrightness(brightness);
		}
	}
}

void Clock::writeDigit(int digit, int xoffset, byte* buffer) {
	if( buffer == NULL ) {
		const byte* src = clockDigits[digit];
		for( int row = 0; row < 16; row++ ) {
			uint8_t* ptr = panel.getBuffers()[2] + row * panel.getWidth()/4 +xoffset;
			for( int p=0;p<4;p++) {
		    	*ptr++ = *src++;
		    }
		}
	} else {
		const byte* src = clockMask[digit];
		for (int row = 0; row < 16; row++) {
			uint8_t* p1 = buffer + row * panel.getWidth() / 4
					+ xoffset;
			for (int p = 0; p < 4; p++) {
			// unroll
				byte v = *p1;
				*p1++ = v | ~ (*src++);
			}
		}
	}
}


void Clock::writeTime(long now,  byte* buffer) {
	if(active) {
		boolean tick = (now%1000) > 500;
		int x = 5;
		if( n.hour()>10 ) {
			writeDigit(n.hour()/10,x,buffer);
		}
		x+=4;
		writeDigit(n.hour()%10,x,buffer);
		x+=4;
		writeDigit(tick?10:11,x,buffer);
		x+=4;
		if( n.minute()>=10 ) {
			writeDigit(n.minute()/10,x,buffer);
		} else {
			writeDigit(0,x,buffer);
		}
		x+=4;
		writeDigit(n.minute()%10,x,buffer);
	}
}

void Clock::clear() {
	byte* p = panel.getBuffers()[2];
	byte* pend = p + panel.getSizeOfBufferInByte();
	while(p<pend) {
		*p++ = 0xFF;
	}
}

void Clock::off() {
	if( active ) {
		active = false;
		panel.setTimeBrightness(0);
		clear();
	}
}

void Clock::on() {
	if( !active ) {
		active = true;
		brightness = 0;
		update(millis());
	}
}

DateTime& Clock::getActualTime() {
	DateTime p(n.unixtime()+lastRtcSync/1000);
	return p;
}
